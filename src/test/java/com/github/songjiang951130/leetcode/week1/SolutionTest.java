package com.github.songjiang951130.leetcode.week1;

import org.junit.Assert;
import org.junit.Test;

public class SolutionTest {
    Solution solution = new Solution();

    @Test
    public void testCase1() {
        System.out.println(solution.reformat("a0b1c2"));
        System.out.println(solution.reformat("leetcode"));
        System.out.println(solution.reformat("1229857369"));
        Assert.assertEquals("c2o0v1i9d", solution.reformat("covid2019"));
        Assert.assertEquals("1a2b3", solution.reformat("ab123"));
    }

    @Test
    public void numTripletsCase1() {
        int[] nums1 = new int[]{7, 4};
        int[] nums2 = new int[]{5, 2, 8, 9};
        Assert.assertEquals(1, solution.numTriplets(nums1, nums2));
    }

    @Test
    public void numTripletsCase2() {
        int[] nums1 = new int[]{1, 1};
        int[] nums2 = new int[]{1, 1, 1};
        Assert.assertEquals(9, solution.numTriplets(nums1, nums2));
    }

    @Test
    public void numTripletsCase() {
        int[] nums1 = new int[]{7, 7, 8, 3};
        int[] nums2 = new int[]{1, 2, 9, 7};
        Assert.assertEquals(2, solution.numTriplets(nums1, nums2));
    }

    @Test
    public void numTripletsCase3() {
        int[] nums1 = new int[]{4, 7, 9, 11, 23};
        int[] nums2 = new int[]{3, 5, 1024, 12, 18};
        Assert.assertEquals(0, solution.numTriplets(nums1, nums2));
    }

    /**
     * error case :
     * [43024,99908]
     * [1864]
     */

    @Test
    public void numTripletsCase4() {
        int[] nums1 = new int[]{43024, 99908};
        int[] nums2 = new int[]{1864};
        Assert.assertEquals(0, solution.numTriplets(nums1, nums2));
    }

    @Test(timeout = 100)
    public void numTripletsCase5() {
        int[] nums1 = new int[]{85, 95, 49, 97, 68, 57, 47, 85, 19, 20, 35, 19, 45, 78, 18, 23, 52, 39, 73, 67, 52, 28, 84, 49, 41, 19, 39, 61, 77, 10, 60, 95, 19, 46, 57, 33, 51, 40, 42, 98, 39, 30, 82, 32, 81, 60, 51, 94, 40, 48, 47, 37, 54, 78, 15, 41, 95, 14, 15, 45, 61, 84, 18, 36, 15, 73, 20, 26, 100, 57, 78, 64, 14, 61, 68, 82, 75, 40, 12, 31, 13, 59, 62, 25, 83, 83, 59, 42, 83, 94, 64, 54, 82, 2, 93, 12, 26, 9, 84, 66, 21, 58, 7, 52, 90, 76, 16, 25, 56, 13, 97, 99, 47, 36, 28, 58, 72, 40, 9, 53, 8, 37, 35, 61, 30, 51, 21, 33, 9, 41, 73, 77, 88, 87, 22, 89, 8, 6, 2, 17, 99, 31, 29, 27, 100, 88, 34, 60, 26, 75, 83, 40, 82, 14, 46, 60, 54, 7, 61, 100, 61, 13, 5, 33, 23, 83, 48, 95, 90, 90, 80, 55, 57, 98, 55, 38, 70, 37, 29, 54, 79, 20, 88, 44, 54, 19, 70, 53, 28, 65, 4, 90, 76, 89, 41, 89, 8, 76, 64, 3, 100, 87, 39, 24, 72, 88, 57, 97, 35, 32, 10, 89, 77, 90, 20, 95, 9, 18, 15, 69, 42, 92, 62, 28, 96, 13, 42, 8, 79, 45, 13, 97, 33, 37, 71, 38, 13, 55, 42, 92, 32, 91, 20, 70, 69, 55, 80, 35, 59, 78, 34, 93, 98, 41, 94, 40, 64, 73, 29, 87, 50, 91, 44, 64, 4, 28, 89, 80, 63, 39, 53, 10, 55, 34, 51, 46, 45, 51, 7, 52, 75, 7, 23, 9, 40, 77, 3, 40, 22, 78, 75, 8, 97, 80, 87, 26, 69, 22, 25, 29, 8, 2, 78, 62, 81, 17, 59, 65, 72, 45, 41, 75, 10, 30, 9, 94, 24, 96, 34, 11, 4, 82, 50, 23, 69, 19, 32, 55, 15, 49, 33, 30, 61, 7, 68, 28, 68, 29, 1, 93, 66, 99, 97, 28, 49, 58, 27, 44, 60, 64, 67, 21, 49, 70, 2, 50, 53, 83, 94, 78, 5610};
        int[] nums2 = new int[]{85, 54, 16, 79, 71, 15, 48, 25, 8, 25, 5, 7, 24, 55, 43, 89, 53, 91, 74, 39, 100, 52, 27, 37, 22, 77, 68, 100, 38, 91, 98, 59, 29, 73, 77, 94, 97, 84, 79, 38, 41, 42, 57, 28, 19, 63, 47, 97, 87, 87, 6, 81, 10, 39, 26, 28, 14, 93, 49, 6, 39, 6, 42, 39, 3, 85, 62, 38, 93, 98, 81, 97, 29, 95, 85, 38, 10, 34, 99, 16, 35, 34, 3, 92, 96, 60, 75, 33, 34, 8, 13, 5, 86, 6, 58, 32, 74, 14, 13, 96, 31, 11, 34, 39, 92, 18, 31, 33, 33, 64, 18, 16, 88, 8, 25, 29, 93, 23, 23, 65, 53, 67, 73, 50, 95, 33, 51, 78, 98, 32, 15, 28, 69, 64, 52, 98, 89, 47, 21, 52, 26, 77, 46, 45, 98, 69, 25, 33, 100, 32, 81, 26, 99, 91, 3, 21, 20, 71, 93, 58, 44, 84, 9, 14, 66, 63, 7, 71, 72, 82, 91, 12, 65, 83, 58, 7, 7, 43, 15, 50, 47, 11, 61, 12, 54, 30, 100, 58, 49, 38, 87, 94, 20, 62, 40, 32, 38, 65, 92, 47, 84, 78, 16, 46, 47, 46, 64, 54, 90, 93, 18, 63, 95, 19, 35, 43, 7, 89, 85, 36, 62, 25, 72, 27, 42, 89, 78, 54, 2, 19, 26, 43, 98, 75, 97, 17, 50, 45, 27, 62, 64, 38, 40, 29, 21, 60, 42, 98, 65, 16, 15, 19, 70, 4, 3, 32, 88, 61, 21, 96, 80, 100, 89, 20, 45, 89, 4, 91, 92, 79, 18, 65, 7, 9, 49, 66, 25, 39, 10, 26, 43, 58, 98, 85, 89, 33, 59, 7, 94, 56, 52, 1, 51, 59, 36, 96, 29, 3, 47, 62, 56, 15, 3, 62, 100, 37, 5, 51, 16, 62, 49, 80, 89, 13, 62, 93, 78, 96, 72, 70, 71, 51, 15, 59, 100, 4, 30, 5, 62, 57, 3, 50, 58, 34, 41, 7, 66, 22, 65, 57, 37, 7, 61, 85, 5, 82, 39, 8, 69, 18, 63, 21, 48, 71, 67, 79, 66, 74, 44, 94, 42, 15, 69, 2, 42, 39, 52, 81, 61, 69, 23, 98, 37, 84, 41, 33, 98, 74, 37, 66, 44, 86, 80, 92, 6, 6, 41, 44, 99, 44, 53, 92, 30};
        Assert.assertEquals(15016, solution.numTriplets(nums1, nums2));
    }
}
